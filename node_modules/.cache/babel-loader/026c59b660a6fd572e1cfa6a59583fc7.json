{"ast":null,"code":"var _jsxFileName = \"/Users/ryan/Desktop/projects/react-habit-tracker/src/app.jsx\";\nimport React, { Component } from 'react';\nimport './app.css';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      habits: [{\n        id: 1,\n        name: 'Reading',\n        count: 0\n      }, {\n        id: 2,\n        name: 'Running',\n        count: 0\n      }, {\n        id: 3,\n        name: 'Coding',\n        count: 0\n      }]\n    };\n\n    this.handleIncrement = habit => {\n      // const habits = [...this.state.habits]; // Spread Operator\n      // const index = habits.indexOf(habit);\n      // habits[index].count++;\n      const habits = this.state.habits.map(item => {\n        if (item.id === habit.id) {\n          return { ...habit,\n            count: habit.count + 1\n          };\n        }\n\n        return item;\n      });\n      this.setState({\n        habits\n      }); // key: value == 새로운 배열을 만들어주어야함 == key value가 동일한 경우 한새로 생략 가능 habits\n    };\n\n    this.handleDecrement = habit => {\n      // const habits = [...this.state.habits];\n      // const index = habits.indexOf(habit);\n      // const count = habits[index].count - 1;\n      // habits[index].count = count < 0 ? 0 : count;\n      const habits = this.state.habits.map(item => {\n        if (item.id === habit.id) {\n          const count = habit.count - 1;\n          return { ...habit,\n            count: count < 0 ? 0 : count\n          };\n        }\n\n        return item;\n      });\n      this.setState({\n        habits: habits\n      });\n    };\n\n    this.handleDelete = habit => {\n      const habits = this.state.habits.filter(item => item.id !== habit.id);\n      this.setState({\n        habits: habits\n      });\n    };\n\n    this.handleAdd = name => {\n      // Spread Operator\n      // make a new habits    Date.now API(add time etc and make unique id)\n      const habits = [...this.state.habits, {\n        id: Date.now(),\n        name,\n        count: 0\n      }];\n      this.setState({\n        habits\n      });\n    };\n\n    this.handleReset = () => {\n      // make a new array\n      // use map, 빙글빙글돌며 make new data\n      const habits = this.state.habits.map(habit => {\n        habit.count = 0;\n        return habit;\n      });\n      this.setState({\n        habits\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {\n        totalCount: this.state.habits.filter(item => item.count > 0).length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Habits, {\n        habits: this.state.habits,\n        onIncrement: this.handleIncrement,\n        onDecrement: this.handleDecrement // onDecrement={(event) => this.handledDecrement(event)} //\n        // this is long way, the other two are short way to declare arrow function\n        ,\n        onDelete: this.handleDelete,\n        onAdd: this.handleAdd,\n        onReset: this.handleReset\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ryan/Desktop/projects/react-habit-tracker/src/app.jsx"],"names":["React","Component","Habits","Navbar","App","state","habits","id","name","count","handleIncrement","habit","map","item","setState","handleDecrement","handleDelete","filter","handleAdd","Date","now","handleReset","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './app.css';\nimport Habits from './components/habits';\nimport Navbar from './components/navbar';\n\n\nclass App extends Component {\n  state = {\n    habits: [\n      { id: 1, name: 'Reading', count: 0 },\n      { id: 2, name: 'Running', count: 0 },\n      { id: 3, name: 'Coding', count: 0 },\n    ],\n  };\n\n//'handleIncreament' 는 변수\n  // 이 변수는 함수를 가리키고 있음 -> 즉, onIncrement={this.handleIncremnet} 하게되면, 함수를 바로 호출하는게 아니라, 포인팅만 하는것임\n  handleIncrement = habit => {\n    // const habits = [...this.state.habits]; // Spread Operator\n    // const index = habits.indexOf(habit);\n    // habits[index].count++;\n\n    const habits = this.state.habits.map(item => {\n      if (item.id === habit.id) {\n        return { ...habit, count: habit.count + 1 };\n      }\n      return item;\n    });\n\n    this.setState({ habits }); // key: value == 새로운 배열을 만들어주어야함 == key value가 동일한 경우 한새로 생략 가능 habits\n  };\n\n  handleDecrement = habit => {\n    // const habits = [...this.state.habits];\n    // const index = habits.indexOf(habit);\n    // const count = habits[index].count - 1;\n    // habits[index].count = count < 0 ? 0 : count;\n\n\n    const habits = this.state.habits.map(item => {\n      if (item.id === habit.id) {\n        const count = habit.count - 1;\n        return { ...habit, count: count < 0 ? 0 : count };\n      }\n      return item;\n    });\n    \n    this.setState({ habits:habits });\n  };\n\n  handleDelete = habit => {\n    const habits = this.state.habits.filter(item => item.id !== habit.id);\n    this.setState({ habits:habits });\n  };\n\n  handleAdd = name => {\n    // Spread Operator\n    // make a new habits    Date.now API(add time etc and make unique id)\n    const habits = [...this.state.habits, { id: Date.now(), name, count: 0 }];\n    this.setState({ habits });\n  };\n\n  handleReset = () => {\n    // make a new array\n    // use map, 빙글빙글돌며 make new data\n    const habits = this.state.habits.map(habit => {\n      habit.count = 0;\n      return habit;\n    });\n    this.setState({ habits });\n  };\n\n\n  render() {\n    return (\n      <>\n        <Navbar\n          totalCount={this.state.habits.filter(item => item.count > 0).length}\n        />\n        <Habits\n          habits={this.state.habits}\n          onIncrement={this.handleIncrement}\n          onDecrement={this.handleDecrement}\n           // onDecrement={(event) => this.handledDecrement(event)} //\n          // this is long way, the other two are short way to declare arrow function\n          onDelete={this.handleDelete}\n          onAdd={this.handleAdd}\n          onReset={this.handleReset}\n        />\n      </>\n    );\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}